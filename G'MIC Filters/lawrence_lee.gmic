#@gmic
#
# File        : lawrence_lee.gmic
#               ( G'MIC commands file )
#
# Description : G'MIC filters made by Lawrence Lee.
#
# Copyright   : Lawrence Lee
#
# License     : GNU GPLv3
#               ( https://www.gnu.org/licenses/gpl.html )
#
# Copyright (C) 2018-2020 Lawrence Lee
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#


#-------------------------------------------------------------------------------

#@gui <b>Testing</b>
#@gui <i>Lawrence</i>

#@gui Focus Blur : lawrence37_focus_blur, lawrence37_focus_blur_p(0)
#@gui : Radius = float(37,0.5,200)
#@gui : sep = separator()
#@gui : note = note{"<b>Onion ring</b>"}
#@gui : Strength = float(0,0,100)
#@gui : Size = float(5,0,100)
#@gui : sep = separator()
#@gui : Gamma = float(2.2,0.2,5)
#@gui : sep = separator()
#@gui : Preview kernel = bool(0)
#@gui : Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left",Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator()
#@gui : note = note{"
#@gui : Blurs an image to simulate out-of-focus blur produced by a typical lens
#@gui : with a circular aperture. The gamma is the gamma the image is encoded
#@gui : in.
#@gui : "}

lawrence37_focus_blur_p:
if {$-2==0}
  -gui_split_preview "-lawrence37_focus_blur ${1--3}",$-1
else
  radius={max(0.5,$1)}
  onion={max(0,$2)}
  thickness={max(0,$3)}
  preview_kernel=$5
  samples=16
  +lawrence37_bokeh_ball $radius,$samples,255,1,$onion,$thickness
  -keep[-1]
endif


lawrence37_focus_blur:

# Variables.
radius={max(0.5,$1)}
onion={max(0,$2)}
thickness={max(0,$3)}
gamma={max(0,$4)}
radius_ceil={ceil($radius)}
samples=16

-repeat $! -local[$>]

-name[0] image

# Special case.
if {$radius<=0.5} -return endif

# Create white image.
-input 100%,100%,1,1,255
-name[-1] white

# Convert to linear.
if {$gamma!=1} -apply_gamma[image] {1/$gamma} endif

# Expand to allow blurring along edges.
-crop[image,white] 0,0,{w-1+2*$radius_ceil},{h-1+2*$radius_ceil}

# Generate kernel.
+lawrence37_bokeh_ball[-1] $radius,$samples,1,0,$onion,$thickness
-name[-1] kernel

# Convolve image and white.
-convolve_fft[image] [kernel]
-convolve_fft[white] [kernel]
-name[image,white] blurred,mask
-remove[kernel]

# Crop the expansion.
-crop[blurred,mask] 0,0,{w-1-2*$radius_ceil},{h-1-2*$radius_ceil}

# Divide "blurred" by "mask" to retain brightness along edges.
+blend[blurred,mask] divide
-name[-1] result
-remove[blurred]
if {s#$result==4} # Handle alpha channel.
  +channels[result] 3
  -name[-1] alpha
  -remove_opacity[result]
  -div[alpha] [mask]
  -remove[mask]
  -mul[alpha] 256 # Max value is 256 instead of 255?!
  -append[result] [alpha],c
  -remove[alpha]
else
  -remove[mask]
endif

# Apply gamma.
if {$gamma!=1} -apply_gamma[result] $gamma endif

-endlocal -done
-return


#-------------------------------------------------------------------------------

#@gui Focus Sharpen : lawrence37_focus_sharpen, lawrence37_focus_sharpen_p(0)
#@gui : Radius = float(5,0,100)
#@gui : Onion ring = float(0,0,100)
#@gui : Onion ring thickness = float(5,0,100)
#@gui : Denoise = float(0,-4,4)
#@gui : Border correction = float(10,0,20)
#@gui : Border interpolation = choice("bicubic","nearest","average","linear","Lanczos")
#@gui : Use built-in deconvolution (no denoise) = bool(0)
#@gui : sep = separator()
#@gui : Preview kernel = bool(0)
#@gui : Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left",Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator()
#@gui : note = note{"
#@gui : Sharpens out-of-focus images produced by typical lenses with circular
#@gui : apertures. Border correction reduces \"ringing\" artifacts along the
#@gui : border of the image. Bicubic and Lanczos border interpolation offer the
#@gui : best results at almost no additional processing cost. This filter uses
#@gui : the discrete Fourier transform to deconvolve the blurred image. The
#@ugi : denoise parameter has no effect when using G'MIC's built-in FFT
#@gui : deconvolution, which appears to produce the same results as when
#@gui : \"denoise\" is set to zero.
#@gui : "}

lawrence37_focus_sharpen_p:
if {$-2==0}
  -gui_split_preview "-lawrence37_focus_sharpen ${1--3}",$-1
else
  radius={max(0.5,$1)}
  onion={max(0,$2)}
  thickness={max(0,$3)}
  samples=16
  +lawrence37_bokeh_ball $radius,$samples,255,1,$onion,$thickness
  -keep[-1]
endif


lawrence37_focus_sharpen:

# Variables.
radius={max(0.5,$1)}
onion={max(0,$2)}
thickness={max(0,$3)}
epsilon={10^($4-3)}
extension={round($radius*max(0,$5))}
if {$6==0}
  interp=3
elif {$6<=3}
  interp={$6-1}
else
  interp=$6
endif
use_built_in=$7
samples=16

# Special case.
if {$radius==0} -return endif

-repeat $! -local[$>]

-name[0] image

# Convert to linear.
-srgb2rgb_unbounded[image]

# Make edges wrap to prevent ringing effect.
-lawrence37_tile_lazy[image] $extension,$extension,$interp

# Generate kernel.
+lawrence37_bokeh_ball $radius,$samples,1,0,$onion,$thickness
-name[-1] kernel

# Deconvolve image.
if {$use_built_in}
  -deconvolve_fft[image] [kernel]
  -remove[kernel]
else
  image_w={w#$image}
  image_h={h#$image}
  image_is={is#$image}
  kernel_w={w#$kernel}
  kernel_h={h#$kernel}

  # Resize kernel.
  -crop[kernel] 0,0,{$image_w-1},{$image_h-1}
  -shift[kernel] {-$kernel_w/2},{-$kernel_h/2},0,0,2

  # Fourier transform.
  -fft[image]
  -name[image,{$image+1}] image_re,image_im
  -fft[kernel]
  -name[kernel,{$kernel+1}] kernel_re,kernel_im

  # Deconvolve.
  -div_complex[image_re,image_im] [kernel_re,kernel_im],$epsilon
  -remove[kernel_re,kernel_im]
  -name[-2,-1] quo_re,quo_im

  # Inverse Fourier transform.
  -ifft[quo_re,quo_im]
  -name[-2,-1] deconv_re,deconv_im
  -remove[deconv_im]

  # Fix shift in lightness.
  -mul[-1] {$image_is/is}
endif

-name[-1] sharpened

# Crop the expansion.
-crop[sharpened] 0,0,{w-1-$extension},{h-1-$extension}

# Apply gamma.
-rgb2srgb_unbounded[sharpened]

-endlocal -done
-return


#-------------------------------------------------------------------------------

#@gui Bokeh Ball : lawrence37_bokeh_ball, lawrence37_bokeh_ball
#@gui : Radius = float(37,0.5,100)
#@gui : Antialiasing samples = int(4,1,16)
#@gui : Intensity = float(255,0,255)
#@gui : Normalize to intensity = bool(1)
#@gui : sep = separator()
#@gui : note = note{"<b>Onion ring</b>"}
#@gui : Strength = float(0,0,100)
#@gui : Size = float(5,0,100)

lawrence37_bokeh_ball:

# Variables.
radius={max(0,$1)}
samples={round(max(1,$2))}
intensity={max(0,$3)}
normalize=$4
onion={max(0,$5)}
thickness={$radius*max(0,$6)/100}

# Draw circle with antialiasing.
+shape_circle {2*$radius*$samples}
-name[-1] ball
if {$samples>1} -resize2dx[ball] {100/$samples}%,2 endif

# Create onion ring by applying unsharp mask.
thick_ceil={ceil($thickness)}
-crop[ball] {-$thick_ceil},{-$thick_ceil},{w-1+$thick_ceil},{h-1+$thick_ceil}
-unsharp[ball] $thickness,$onion
-cut[ball] 0,100%
-crop[ball] {$thick_ceil},{$thick_ceil},{w-1-$thick_ceil},{h-1-$thick_ceil}

# Normalize.
if {$normalize==0} -mul[ball] {$intensity/is#$ball}
else -normalize[ball] 0,$intensity
endif

-keep[ball]
-return


#-------------------------------------------------------------------------------

# #@gui Lazy Tile : lawrence37_tile_lazy, lawrence37_tile_lazy
# #@gui : x = int(37,1,100)
# #@gui : y = int(37,1,100)
# #@gui : Interpolation = choice("nearest","average","linear","bicubic","lanczos")

lawrence37_tile_lazy:

pad_x={round($1)}
pad_y={round($2)}
if {$3<=2} interp={$3+1}
else interp={$3+2}
endif

-repeat $! -local[$>]

-name[0] image

if {$pad_y>0}

# Bottom
+crop[image] 0,100%,100%,100%
-name[-1] bottom

# Top
+crop[image] 0,0,100%,0
-name[-1] top

# Horizontal
+append[bottom,top] y
-name[-1] horz
-remove[top,bottom]
-resize[horz] 100%,{$pad_y+2},100%,100%,$interp
-crop[horz] 0,1,100%,{h-2}

# Attach horizontal to bottom.
-append[image,horz] y

endif

if {$pad_x>0}

# Right
+crop[image] 100%,0,100%,100%
-name[-1] right

# Left
+crop[image] 0,0,0,100%
-name[-1] left

# Vertical
+append[right,left] x
-name[-1] vert
-remove[left,right]
-resize[vert] {$pad_x+2},100%,100%,100%,$interp
-crop[vert] 1,0,{w-2},100%

# Attach vertical to right
-append[image,vert] x

endif

-endlocal -done
-return


# ------------------------------------------------------------------------------

#@gui Contrast : lawrence37_contrast, lawrence37_contrast_p
#@gui : Contrast = float(5,0.1,10)
#@gui : Contrast center = float(0.5, 0, 1)
#@gui : Red weight = float(1, 0.2, 5)
#@gui : Green weight = float(1, 0.2, 5)
#@gui : Blue weight = float(1, 0.2, 5)
#@gui : Show curve = bool(1)

lawrence37_contrast_p:

# Variables.
contrast=$1
center=$2
red_weight=$3
green_weight=$4
blue_weight=$5
show_curve=$-1

# Apply contrast.
-name[-1] orig
+lawrence37_contrast ${1--2}
-name[-1] final

# Overlay curve image.
if {$show_curve}
  # Make graph half size of shortest dimension.
  graph_size={0.5*min({orig,w},{orig,h})}

  # Obtain histogram of original image's intensity.
  +lawrence37_intensity[orig] $red_weight,$green_weight,$blue_weight
  -name[-1] graph
  -display_histogram[graph] $graph_size,$graph_size,255,0,255,0

  # Make histogram half opacity.
  -to_rgba[graph]
  -apply_channels[graph] "mul 0.5",1

  # Calculate curve function.
  correction_factor={1/(atan($contrast*(1-$center))+atan($contrast*$center))}
  correction_shift={$correction_factor*atan($contrast*$center)}
  -graph[graph] '$correction_factor*atan($contrast*(x-$center))+$correction_shift',100,1,0,0,1,1,0,1,255

  # Overlay graph on final image.
  -crop[graph] 0,{{graph,h}-{orig,h}},{orig,w},100%
  -blend[final] [graph],alpha
  -remove[graph]
endif

-remove[orig]
-return


lawrence37_contrast:

-repeat $! -local[$>]

-name[0] orig

# Variables
contrast=$1
center=$2
red_weight=$3
green_weight=$4
blue_weight=$5

# Obtain intensity.
+lawrence37_intensity[orig] $red_weight,$green_weight,$blue_weight

# Name before and after intensities denominator and numerator.
-name[-1] denom
-div[denom] 255
[denom]
-name[-1] numer

# Apply contrast to numer.
-sub[numer] $center
-mul[numer] $contrast
-atan[numer]
correction_factor={1/(atan($contrast*(1-$center))+atan($contrast*$center))}
correction_shift={$correction_factor*atan($contrast*$center)}
-mul[numer] $correction_factor
-add[numer] $correction_shift

# Calculate intensity scale factors.
-div[numer] [denom]
-remove[denom]
-name[-1] factor

# Apply factor.
-replace_nan[factor] 1
-mul[orig] [factor]
-remove[factor]

-endlocal -done
-return

lawrence37_intensity:

-name[0] orig

# Variables.
red_weight=$1
green_weight=$2
blue_weight=$3

total_weight={$red_weight+$green_weight+$blue_weight}
red_factor={$red_weight/$total_weight}
green_factor={$green_weight/$total_weight}
blue_factor={$blue_weight/$total_weight}

# Combine color channels.
+channels[orig] 0
-name[-1] red
+channels[orig] 1
-name[-1] green
+channels[orig] 2
-name[-1] blue
-mul[red] $red_factor
-mul[green] $green_factor
-mul[blue] $blue_factor
-add[red] [green]
-name[red] intensity
-remove[green]
-add[intensity] [blue]
-remove[blue,orig]


#-------------------------------------------------------------------------------

#@gui Incremental Guided Filter: lawrence37_incremental_guided_filter, lawrence37_incremental_guided_filter_p(0)
#@gui : Radius = float(5,0,100)
#@gui : Radius increment factor = float(4,0.1,10)
#@gui : Threshold = float(0.075,0,100)
#@gui : Threshold increment factor = float(1.5,0.1,10)
#@gui : Iterations = int(4,1,10)
#@gui : sep = separator()
#@gui : Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left",Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")
#@gui : sep = separator()
#@gui : note = note{"
#@gui : Incremental guided filter as described in http://photoflowblog.blogspot.com/2019/04/new-shadowshighlights-and-tone-mapping.html
#@gui : "}

lawrence37_incremental_guided_filter_p:
-gui_split_preview "-lawrence37_incremental_guided_filter ${1--2}",$-1


lawrence37_incremental_guided_filter:

# Variables.
radius=$1
radius_factor=$2
threshold=$3
threshold_factor=$4
iterations=$5

-repeat $! -local[$>]

i=0
for {$i<$iterations}
exponent={$iterations-1-$i}
cur_radius={$radius/($radius_factor^$exponent)}
cur_threshold={$threshold/($threshold_factor^$exponent)}
-guided $cur_radius,$cur_threshold
i={$i+1}
done

-endlocal -done
-return

# ------------------------------------------------------------------------------

#@gui Contrast Transfer: lawrence37_contrast_transfer_gui, lawrence37_contrast_transfer_gui
#@gui : note = note{"
#@gui : Transfers local contrast from the bottom layer (source) to the top layer
#@gui : (target).
#@gui : <br/>
#@gui : "}
#@gui : sep = separator()
#@gui : Strength = float(100,0,100)
#@gui : sep = separator()
#@gui : note = note{"<b>Source Image</b>"}
#@gui : Tameness = float(0,-4,4)
#@gui : Tameness Threshold = float(0,-6,6)
#@gui : Tone Recovery = bool(0)
#@gui : Detail Amplification = float(0,-10,10)
#@gui : sep = separator()
#@gui : note = note{"<b>Transfer</b>"}
#@gui : Targeting = float(7,-5,20)
#@gui : Falloff = float(0,0,200)
#@gui : Epsilon = float(1,0,100)
#@gui : sep = separator()
#@gui : note = note{"<b>Quality</b>"}
#@gui : Detail Extraction = int(10,1,100)
#@gui : Iteration step size = float(2,1.125,8)
#@gui : sep = separator()
#@gui : note = note{"
#@gui : <br/>
#@gui : <b>How to use</b>
#@gui : <br/><br/>
#@gui : You can adjust the tameness and detail amplification of the
#@gui : source image. Tameness reduces strong contrast while preserving subtle
#@gui : contrast. The threshold defines how the strong and subtle contrast are
#@gui : separated. A high threshold places the separator higher, which means
#@gui : more parts of the image are considered to have subtle contrast. These
#@gui : areas are preserved, so the tameness effect is weaker. Tone recovery
#@gui : restores global contrast removed by tameness. The tameness tools are for
#@gui : advanced users. Other users may prefer the detail amplification. It
#@gui : strengthens the contrast transferred to the target image.
#@gui : <br/><br/>
#@gui : Targeting reduces the strength of the contrast transfer in places where
#@gui : the contrast of the source image is high. Falloff reduces the transfer
#@gui : of coarse contrast while leaving fine contrast alone. Epsilon reduces
#@gui : contrast transfer from dark regions of the source image. This is an
#@gui : advanced setting and should be left as a small non-zero number.
#@gui : <br/><br/>
#@gui : Contrast is transferred for several levels of coarseness beginning with
#@gui : pixel-level fineness up to a coarseness about the size of the entire
#@gui : image. Detail extraction quality controls how well the contrast is
#@gui : extracted for a given level of coarseness. A low value still produces
#@gui : good results in most cases. A high value increases processing time.
#@gui : The iteration step size affects the number of coarseness levels. Large
#@gui : values reduce the number of levels and the quality.
#@gui : <br/><br/>
#@gui : <b>Performance</b>
#@gui : <br/><br/>
#@gui : Using tameness, tone recovery, detail amplification, targeting, and
#@gui : falloff add work for the computer. Setting them to zero disables them
#@gui : and improves performance. Higher detail extraction quality decreases
#@gui : performance. Higher iteration step sizes increases performance.
#@gui : "}


lawrence37_contrast_transfer_gui:
-if {$!!=2}
  -gui_print_preview "Requires exactly two input layers."
  -return
-endif
strength={$1/100}
tameness=$2
tame_threshold=$3
tameness_correction=$4
amp={$5/10}
targeting=$6
falloff={$7/100}
epsilon={255*$8/100}
extraction_quality=$9
step_size=$10
-lawrence37_contrast_transfer[-2] [-1],$strength,$tameness,$tame_threshold,$tameness_correction,$amp,$targeting,$falloff,$epsilon,$extraction_quality,$step_size
-keep[-2]
-return


lawrence37_contrast_transfer:

# Variables.
strength=$2
tameness={2^$3}
tame_threshold={2^(-$4)}
tameness_correction=$5
amplification={10^$6}
targeting=$7
falloff=$8
epsilon=$9
extraction_quality=$10
step_size=$11

steps_per_level={1/log2($step_size)}
-pass$1 -repeat {$!-1} -local[$>,-1]

-name[-2] target
-name[-1] source

diameter={sqrt((w#$target)^2+(h#$target)^2)}
max_level={ceil(log2($diameter))+1}
start_iteration={ceil($steps_per_level*($max_level-1))+1}
end_iteration=1

# Get luminance of source and target images.
+luminance[target]
-name[-1] target_l
+luminance[source]
-name[-1] source_l

# Resize to a factor of 2.
scale_comp={2^($max_level-1)/$diameter}
base_diameter={$scale_comp*$diameter}

# Create multi-resolution pyramid.
pyramid_height={max(1,$max_level-ceil(log2($extraction_quality))-1)}
level=1
for $level<$pyramid_height
  scale_factor={$scale_comp*2^(-$level)}
  +resize[-2] {w#$target_l*$scale_factor},{h#$target_l*$scale_factor},100%,100%,2
  +resize[-2] {w#$target_l*$scale_factor},{h#$target_l*$scale_factor},100%,100%,2
  level={$level+1}
done
cur_diameter={sqrt((w#-1)^2+(h#-1)^2)}
scale={$base_diameter/$cur_diameter}

# Highest level.
+blur[-2] {($step_size^$start_iteration)/$scale}
-name[-1] c_2
+blur[-2] {($step_size^$start_iteration)/$scale}
-name[-1] o_2

# Start with no details.
-input 100%,100%,1,1,1
-name[-1] detail
-move[detail] {$source+1}

i=$start_iteration
for $i>=$end_iteration

  blur_radius={$step_size^($i-1)}
  if ($blur_radius/$scale<$extraction_quality)&&($o_2>6)
    # Switch to higher resolution.
    do
      remove[-3,-4]
      cur_diameter={sqrt((w#-3)^2+(h#-3)^2)}
      scale={$base_diameter/$cur_diameter}
    while ($blur_radius/$scale<$extraction_quality)&&($o_2>6)
    -resize[detail,c_2,o_2] {w#-3},{h#-3},100%,100%,3
  endif

  if $i!=$end_iteration
    # Obtain lower level's blurred images.
    +blur[-4] {$step_size^($i-1)/$scale}
    -name[-1] c_1
    +blur[-4] {$step_size^($i-1)/$scale}
    -name[-1] o_1
  else
    # Lowest level.
    -name[target_l] c_1
    -name[source_l] o_1
  endif

  # Suppress details in areas of high local contrast.
  if {$targeting!=0} # Optimization.
    +add[o_1] $epsilon
    -log[-1]
    -gradient_norm[-1]
    -name[-1] grad_norm
    #-replace_nan[grad_norm] 1000000
    if {$targeting>0}
      targeting_factor=$targeting
    else
      targeting_factor={1/abs($targeting)}
    endif
    level_targeting={-$targeting_factor*$step_size^(($i-1))/$scale}
    -mul[grad_norm] $level_targeting
    -blur[grad_norm] {1+$step_size^($i-1)/$scale}
    -exp[grad_norm]
    -name[grad_norm] targeting_mask
    if {$targeting<0}
      -mul[targeting_mask] -1
      -add[targeting_mask] 1
    endif
  endif

  # Extract details for this level.
  +div[c_1] [c_2]
  -name[-1] c_d
  +div[o_1] [o_2]
  -name[-1] o_d
  -remove[c_2,o_2]
  if {$tameness!=1} # Optimization.
    # x^(1/(t+$tameness(1-t))), t=e^(-|ln(x)|)
    +log[o_d]
    -abs[-1]
    -mul[-1] {-$steps_per_level*$tame_threshold}
    -exp[-1]
    -add[-1] '$tameness*(1-i)'
    -pow[-1] -1
    -pow[o_d] [-1]
    -remove[-1]
  endif
  if {$amplification!=0}
    -pow[o_d] $amplification
  endif
  -div[o_d] [c_d]
  -name[o_d] partial_detail
  -remove[c_d]
  -replace_nan[partial_detail] 1

  # Apply this level's details to the cumulative details.
  if {$targeting!=0}
    -pow[partial_detail] [targeting_mask]
    -remove[targeting_mask]
  endif
  if {$falloff!=0} # Optimization.
    -pow[partial_detail] {$step_size^(-$falloff*$step_size^($i-$start_iteration))}
  endif
  -mul[detail] [partial_detail]
  -remove[partial_detail]

  -name[c_1] c_2
  -name[o_1] o_2

  i={$i-1}
done

-name[c_2] target_l
-name[o_2] source_l

# Tameness correction.
if {$tameness_correction&&$tameness!=1}
  +blur[source_l] {$step_size^$start_iteration}
  -name[-1] source_blur
  +div[source_l] [source_blur]
  -name[-1] correction
  -remove[source_blur]
  -replace_nan[correction] 1
  -pow[correction] {1-1/$tameness}
  -replace_inf[correction] 1
  -mul[detail] [correction]
  -remove[correction]
endif

# Apply details to target image.
-pow[detail] $strength
if {s#$target==4} # Has alpha channel.
  +channels[target] 3
  -name[-1] alpha
  -remove_opacity[target]
  -srgb2rgb_unbounded[target]
  -mul[target] [detail]
  -rgb2srgb_unbounded[target]
  -append[target] [alpha],c
else
  -srgb2rgb_unbounded[target]
  -mul[target] [detail]
  -rgb2srgb_unbounded[target]
endif

-keep[target]

-endlocal -done
-return


#-------------------------------------------------------------------------------

#@gui Contrast Transfer (fast): lawrence37_contrast_transfer_fast_gui, lawrence37_contrast_transfer_fast_gui
#@gui : note = note{"
#@gui : Transfers local contrast from the bottom layer (source) to the top layer
#@gui : (target).
#@gui : <br/>
#@gui : "}
#@gui : sep = separator()
#@gui : Strength = float(100,0,100)
#@gui : sep = separator()
#@gui : note = note{"<b>Source Image</b>"}
#@gui : Tameness = float(0,-4,4)
#@gui : Tameness Threshold = float(0,-6,6)
#@gui : Tone Recovery = bool(0)
#@gui : Detail Amplification = float(0,-10,10)
#@gui : sep = separator()
#@gui : note = note{"<b>Transfer</b>"}
#@gui : Targeting = float(7,-5,20)
#@gui : Falloff = float(0,0,200)
#@gui : Epsilon = float(1,0.01,10)
#@gui : sep = separator()
#@gui : Quality = int(1,1,8)
#@gui : Contrast Smoothness = float(0,0,2)
#@gui : sep = separator()
#@gui : note = note{"
#@gui : <br/>
#@gui : <b>How to use</b>
#@gui : <br/><br/>
#@gui : You can adjust the tameness and detail amplification of the
#@gui : source image. Tameness reduces strong contrast while preserving subtle
#@gui : contrast. The threshold defines how the strong and subtle contrast are
#@gui : separated. A high threshold places the separator higher, which means
#@gui : more parts of the image are considered to have subtle contrast. These
#@gui : areas are preserved, so the tameness effect is weaker. Tone recovery
#@gui : restores global contrast removed by tameness. The tameness tools are for
#@gui : advanced users. Other users may prefer the detail amplification. It
#@gui : strengthens the contrast transferred to the target image.
#@gui : <br/><br/>
#@gui : Targeting reduces the strength of the contrast transfer in places where
#@gui : the contrast of the source image is high. Falloff reduces the transfer
#@gui : of coarse contrast while leaving fine contrast alone. Epsilon reduces
#@gui : contrast transfer from dark regions of the source image. This is an
#@gui : advanced setting and should be left as a small non-zero number.
#@gui : <br/><br/>
#@gui : Contrast is transferred for several levels of coarseness beginning with
#@gui : pixel-level fineness up to the full image. Quality controls the number
#@gui : of different contrast coarseness to sample per level. It is generally
#@gui : okay to leave this number at 1 or 2. Contrast smoothness applies
#@gui : smoothing to the extracted contrast and helps reduce irregularities.
#@gui : <br/><br/>
#@gui : <b>Performance</b>
#@gui : <br/><br/>
#@gui : Using tameness, tone recovery, detail amplification, targeting, and
#@gui : falloff add work for the computer. Setting them to zero disables them
#@gui : and improves performance. Quality increases the workload. Doubling the
#@gui : quality will approximately double the time it takes to apply the
#@gui : contrast transfer.
#@gui : "}


lawrence37_contrast_transfer_fast_gui:
-if {$!!=2}
  -gui_print_preview "Requires exactly two input layers."
  -return
-endif
strength={$1/100}
tameness=$2
tame_threshold=$3
tameness_correction=$4
amp={$5/10}
targeting=$6
falloff={$7/100}
epsilon={255*$8/100}
level_steps=$9
smoothness=$10
-lawrence37_contrast_transfer_fast[-2] [-1],$strength,$tameness,$tame_threshold,$tameness_correction,$amp,$targeting,$falloff,$epsilon,$level_steps,$smoothness
-keep[-2]
-return


lawrence37_contrast_transfer_fast:

# Variables.
strength=$2
tameness={2^$3}
tame_threshold={2^(-$4)}
tameness_correction=$5
amplification={10^$6}
targeting=$7
falloff=$8
epsilon=$9
steps_per_level=$10
smoothness=$11

-pass$1 -repeat {$!-1} -local[$>,-1]

-name[-2] target
-name[-1] source

# Calculate levels and step size.
max_level={ceil(log2(max(w#$target,h#$target)))+2}
step_size={2^(1/$steps_per_level)}
start_iteration={2*$steps_per_level}
end_iteration={$steps_per_level*($max_level-1)+1}

# Get luminance of source and target images.
+luminance[target]
-name[-1] target_l
+luminance[source]
-name[-1] source_l

# Create multi-scale images.
base_scale={2^($max_level-1)/max(w#$target_l,h#$target_l)}
base_height={$base_scale*h#$target_l}
base_width={$base_scale*w#$target_l}
+resize[target_l] $base_width,$base_height,1,1,6
-max[-1] 0
+resize[source_l] $base_width,$base_height,1,1,6
-max[-1] 0
x=1
for $x<{$end_iteration-$start_iteration+1}
  +resize[-2] {$base_width/($step_size^$x)},{$base_height/($step_size^$x)},1,1,2
  +resize[-2] {$base_width/($step_size^$x)},{$base_height/($step_size^$x)},1,1,2
  x={$x+1}
done

# Start with no details.
-input 100%,100%,1,1,1
-name[-1] detail

i=$start_iteration
for $i<$end_iteration

  # Renaming.
  -name[-5] c_1
  -name[-4] o_1
  -name[-3] c_2
  -name[-2] o_2

  # Resize smaller images.
  -resize[c_2] {w#$c_1},{h#$c_1},1,1,3
  -resize[o_2] {w#$o_1},{h#$o_1},1,1,3

  # Suppress details in areas of high local contrast.
  if {$targeting!=0} # Optimization.
    +add[o_1] $epsilon
    -log[-1]
    -gradient_norm[-1]
    -name[-1] grad_norm
    if {$targeting>0}
      targeting_factor=$targeting
    else
      targeting_factor={1/abs($targeting)}
    endif
    level_targeting={-$targeting_factor*$epsilon}
    -mul[grad_norm] $level_targeting
    -exp[grad_norm]
    -name[grad_norm] targeting_mask
    if {$targeting<0}
      -mul[targeting_mask] -1
      -add[targeting_mask] 1
    endif
  endif

  # Extract details for this level.
  +div[c_1] [c_2]
  -name[-1] c_d
  +div[o_1] [o_2]
  -name[-1] o_d
  -remove[c_2,o_2]
  if {$tameness!=1} # Optimization.
    +log[o_d]
    -abs[-1]
    -mul[-1] {-$steps_per_level*$tame_threshold}
    -exp[-1]
    -add[-1] '$tameness*(1-i)'
    -pow[-1] -1
    -pow[o_d] [-1]
    -remove[-1]
  endif
  if {$amplification!=0}
    -pow[o_d] $amplification
  endif
  -div[o_d] [c_d]
  -name[o_d] partial_detail
  -remove[c_d]
  -replace_nan[partial_detail] 1

  # Apply this level's details to the cumulative details.
  if {$targeting!=0}
    -pow[partial_detail] [targeting_mask]
    -remove[targeting_mask]
  endif
  if {$falloff!=0} # Optimization.
    -pow[partial_detail] {$step_size^(-$falloff*($end_iteration-$i-1))}
  endif
  -resize[detail] {w#$partial_detail},{h#$partial_detail},1,1,3
  if $smoothness
    -blur[detail] $smoothness
  endif
  -mul[detail] [partial_detail]
  -remove[partial_detail]

  i={$i+1}
done

-resize[detail] {w#$target_l},{h#$target_l},1,1,6

# Tameness correction.
if {$tameness_correction&&$tameness!=1}
  +blur[source_l] {$step_size^$end_iteration}
  -name[-1] source_blur
  +div[source_l] [source_blur]
  -name[-1] correction
  -remove[source_blur]
  -replace_nan[correction] 1
  -pow[correction] {1-1/$tameness}
  -replace_inf[correction] 1
  -mul[detail] [correction]
  -remove[correction]
endif

# Apply details to target image.
-pow[detail] $strength
if {s#$target==4} # Has alpha channel.
  +channels[target] 3
  -name[-1] alpha
  -remove_opacity[target]
  -srgb2rgb_unbounded[target]
  -mul[target] [detail]
  -rgb2srgb_unbounded[target]
  -append[target] [alpha],c
else
  -srgb2rgb_unbounded[target]
  -mul[target] [detail]
  -rgb2srgb_unbounded[target]
endif

-keep[target]

-endlocal -done
-return


#-------------------------------------------------------------------------------

#@gui Soft focus: lawrence37_soft_focus, lawrence37_soft_focus_p(1)
#@gui : note = note{"
#@gui : Simulates the soft focus lens effect.
#@gui : "}
#@gui : sep = separator()
#@gui : Amount = float(50, 0, 100)
#@gui : Dispersion = float(2, 0, 25)
#@gui : Blur = float(0, 0, 1)
#@gui : Gamma = float(1, 0.1, 10)
#@gui : sep = separator()
#@gui : Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical","Duplicate top","Duplicate left",Duplicate bottom","Duplicate right","Duplicate horizontal","Duplicate vertical","Checkered","Checkered inverse")

lawrence37_soft_focus_p:
-gui_split_preview "-lawrence37_soft_focus ${1--2}",$-1
-return

lawrence37_soft_focus:
amount=$1
dispersion=$2
blur=$3
gamma=$4

alpha={$amount/100}

-repeat $! -local[$>]

diag={sqrt(h*h+w*w)/2}
if {$gamma!=1}
  -apply_gamma {1/$gamma}
endif
radius={$dispersion*$diag/100}
+blur $radius
if $blur
  -blur[-2] $blur
endif
-blend alpha,$alpha
if {$gamma!=1}
  -apply_gamma $gamma
endif

-endlocal -done
-return


#-------------------------------------------------------------------------------

#@gui Lab viewer: lawrence37_lab_viewer, lawrence37_lab_viewer
#@gui : note = note{"
#@gui : View the top of the CIELAB color space.
#@gui : "}
#@gui : sep = separator()
#@gui : Size = int(200, 1, 1000)
#@gui : Range (10^x) = float(2, 0, 4)
#@gui : Epsilon = float(0.1, .01, 1)
#@gui : sep = separator()
#@gui : note = note {"
#@gui : Size: Width and height in pixels.
#@gui : <br/>
#@gui : Range: The extent of a* and b*.
#@gui : <br/>
#@gui : Epsilon: Accuracy of L*.
#@gui : "}

lawrence37_lab_viewer:

size=$1
range={10^$2}
epsilon=$3

resolution={$size/$range/2}

# Create L*, a*, and b* channels.
rm
$size,$size,1,1,[0]
-name[-1] lab_l
$size,$size,1,1,[x/$resolution-$range] # a*
$size,$size,1,1,[$range-y/$resolution] # b*
-append[-2] [-1],c
rm[-1]
-name[-1] lab_ab

# Pseudo-binary search to find L*. Start with a reasonable step size and keep
# adding to L* with successively smaller steps until we approach the correct L*.
step_size=51.2
-do
  # For each pixel, keep adding step size to L* until it is too bright.
  -do
    # Get sRGB image based on current L*.
    +append[lab_l] [lab_ab],c
    -name[-1] lab
    +lab2srgb[lab]
    -name[-1] mask
    # Create binary mask indicating which pixels are too bright (max RGB >= 255).
    -compose_channels[mask] max
    # For pixels which are not too bright, add the step size to L*.
    -threshold[mask] 255
    -sub[mask] 1
    -mul[mask] $step_size
    -sub[lab_l] [mask]
    # Repeat this step if some pixels were altered.
    continue={im#-1}
    -rm[lab,mask]
  -while {$continue}
  # Subtract the step size from L* for all pixels so that max RGB < 255.
  -sub[lab_l] $step_size
  # Cut step size in half.
  step_size={$step_size/2}
-while {$step_size>=$epsilon}

# Convert L*a*b* to sRGB.
+append[lab_l] [lab_ab],c
-name[-1] final
-lab2srgb[final]

-keep[final]


# The following code is adapted from
# https://raw.githubusercontent.com/dtschump/gmic/master/src/gmic_stdlib.gmic.
# The licence information is included below.

#
#  File        : gmic_stdlib.gmic
#                ( G'MIC command file )
#
#  Description : GREYC's Magic for Image Computing - Standard library
#                ( https://gmic.eu )
#
#  Copyright   : David Tschumperlé
#                ( https://tschumperle.users.greyc.fr/ )
#
#  Licenses    : This file is 'dual-licensed', you have to choose one
#                of the two licenses below to apply.
#
#                CeCILL-C
#                The CeCILL-C license is close to the GNU LGPL.
#                ( http://cecill.info/licences/Licence_CeCILL-C_V1-en.html )
#
#            or  CeCILL v2.1
#                The CeCILL license is compatible with the GNU GPL.
#                ( http://cecill.info/licences/Licence_CeCILL_V2.1-en.html )
#
#  This software is governed either by the CeCILL or the CeCILL-C license
#  under French law and abiding by the rules of distribution of free software.
#  You can  use, modify and or redistribute the software under the terms of
#  the CeCILL or CeCILL-C licenses as circulated by CEA, CNRS and INRIA
#  at the following URL: "http://cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL and CeCILL-C licenses and that you accept its terms.
#

#------------------------------------------------------------------------------

rgb2srgb_unbounded:
f "val = i/255; sval = val<=0.0031308?val*12.92:1.055*val^0.416667 - 0.055; 255*sval"


#------------------------------------------------------------------------------

rgb_luminance:
  remove_opacity
  repeat $! l[$>]
  if s==3 sh 0 sh[0] 1 sh[0] 2 *[1] 0.22248840 *[2] 0.71690369 *[3] 0.06060791 +[1-3] rm[1]
  fi endl done
  channels 0


#------------------------------------------------------------------------------

srgb2rgb_unbounded:
f "sval = i/255; val = sval<=0.04045?sval/12.92:((sval + 0.055)/(1.055))^2.4; 255*val"


#------------------------------------------------------------------------------

xyz2rgb_unbounded:
l[] if isnum("$1") illu={"$1>1?2:$1>0?1:0"} else if ["'$1'"]!=',' noarg fi illu=2 fi onfail noarg illu=2 endl
if $illu==2 # E
  mix_rgb {[2.3706743,-0.9000405,-0.4706338,\
            -0.513885,1.4253036,0.0885814,\
            0.0052982,-0.0146949,1.0093968]*255}
elif $illu # D65
  mix_rgb {[3.2404542,-1.5371385,-0.4985314,\
            -0.9692660,1.8760108,0.0415560,\
            0.0556434,-0.2040259,1.0572252]*255}
else # D50
  mix_rgb {[3.134274799724,-1.617275708956,-0.490724283042,\
            -0.978795575994,1.916161689117,0.033453331711,\
            0.071976988401,-0.228984974402,1.405718224383]*255}
fi
